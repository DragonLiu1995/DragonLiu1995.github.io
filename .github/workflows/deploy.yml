# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ImageMagick & headers
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick libmagickwand-dev

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.2'

      - name: Update RubyGems, Bundler & uri gem
        run: |
          gem update --system --force
          gem install bundler
          gem install uri

      - name: Enable Bundler cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          npm install -g @mermaid-js/mermaid-cli

      - name: Setup deploy options & Git identity
        id: setup
        shell: bash
        run: |
          # Configure Git user for commits
          git config --global user.name "GitHub Action"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Determine source branch and no-push flag
          if [[ "${GITHUB_REF}" == refs/pull/*/merge ]]; then
            echo "SRC_BRANCH=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
            echo "NO_PUSH=--no-push"       >> $GITHUB_OUTPUT
          else
            echo "SRC_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

          # Set deploy branch
          echo "DEPLOY_BRANCH=gh-pages" >> $GITHUB_OUTPUT

      - name: Deploy website
        run: |
          yes | bin/deploy --verbose ${{ steps.setup.outputs.NO_PUSH }} \
                          --src ${{ steps.setup.outputs.SRC_BRANCH }} \
                          --deploy ${{ steps.setup.outputs.DEPLOY_BRANCH }}
